# -*- Python -*-

# Configuration file for the 'lit' test runner.

import os
import sys
import re
import platform

import lit.util
import lit.formats

lit_config.note('using Python {}'.format(sys.version))

# name: The name of this test suite.
config.name = 'unrarall'

# Use external shell for execution
config.test_format = lit.formats.ShTest(execute_external=True)

# suffixes: A list of file extensions to treat as test files. This is overriden
# by individual lit.local.cfg files in the test subdirectories.
config.suffixes = ['.test']

# excludes: A list of directories to exclude from the testsuite. The 'Inputs'
# subdirectories contain auxiliary inputs for various tests in their parent
# directories.
config.excludes = []

# test_source_root: The root path where tests are located.
config.test_source_root = os.path.dirname(os.path.abspath(__file__))

# test_exec_root: The root path where tests should be run.
config.test_exec_root = config.test_source_root

# Propagate 'HOME' through the environment.
if 'HOME' in os.environ:
    config.environment['HOME'] = os.environ['HOME']

# Propagate the temp directory
if 'TMP' in os.environ:
    config.environment['TMP'] = os.environ['TMP']
if 'TEMP' in os.environ:
    config.environment['TEMP'] = os.environ['TEMP']

# Propagate PYTHON_EXECUTABLE into the environment
config.environment['PYTHON_EXECUTABLE'] = getattr(config, 'python_executable', '')

# Check that the object root is known.
if config.test_exec_root is None:
    lit_config.fatal('Could not determine execution root for tests!')

"""
   Function for quoting filepaths
   so that if they contain spaces
   lit's shell interpreter will
   treat the path as a single argument
"""
def quotePath(path):
    if ' ' in path:
        return '"{path}"'.format(path=path)
    else:
        return path

# Find unrarall
up = os.path.dirname
repository_root = up(
                     up( os.path.abspath(__file__) )
                   )
lit_config.note('Repository root is {}'.format(repository_root))

unrarall_executable = os.path.join(repository_root, 'unrarall')

if not os.path.exists(unrarall_executable):
    lit_config.fatal('Could not find unrarall at {}'.format(unrarall_executable))

unrarall_executable = quotePath(unrarall_executable)

# Allow user to provide extra arguments to unrarall
unrarall_args = lit_config.params.get('unrarall_args','')
if len(unrarall_args) > 0:
    unrarall_executable = unrarall_executable + ' ' + unrarall_args

# Inform user what executable is being used
lit_config.note('Using unrarall: {}\n'.format(unrarall_executable))

config.substitutions.append( ('%unrarall', unrarall_executable) )

# Detect available tools and declare them as available features
def handle_binary(name):
  assert isinstance(name, str)
  assert len(name) > 0
  assert name.count(' ') == 0
  binary_path = lit.util.which(name)
  if binary_path is not None:
    feature_name = '{}_binary'.format(name)
    lit_config.note('{} is an available feature'.format(feature_name))
    config.available_features.add(feature_name)
    config.substitutions.append(('%{}'.format(name), binary_path))
    lit_config.note('Found "{}" at "{}"'.format(name, binary_path))
  else:
    feature_name = 'not-{}'.format(name)
    config.available_features.add(feature_name)
    lit_config.note('{} is an available feature'.format(feature_name))

handle_binary('unrar')
handle_binary('7z')
handle_binary('rar')
handle_binary('cfv')
handle_binary('cksfv')

# Set `find` substitution
if platform.system() == 'Darwin':
  config.substitutions.append(('%find', 'gfind'))
else:
  config.substitutions.append(('%find', 'find'))

# Detect the OutputCheck tool
output_check_path = lit.util.which('OutputCheck')
if output_check_path == None:
    lit_config.fatal('The OutputCheck tool is not in your PATH. Please install it.')

config.substitutions.append( ('%OutputCheck', output_check_path + ' --dump-file-to-check --comment="#"') )
